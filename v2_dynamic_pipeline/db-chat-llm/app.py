# gradio_sqlite_mcp.py
import gradio as gr
import asyncio
import os
import json
from dotenv import load_dotenv
from langchain_mcp_adapters.client import MultiServerMCPClient
from langgraph.prebuilt import create_react_agent
from langchain_groq import ChatGroq

load_dotenv()

class SQLiteMCPClient:
    def __init__(self, db_path):
        self.db_path = db_path
        self.client = None
        self.agent = None
        self.connected = False

    async def connect(self):
        try:
            self.client = MultiServerMCPClient({
                "sqlite": {
                    "transport": "stdio",  # ‚úÖ REQUIRED
                    "command": "uv",
                    "args": [
                        "--directory", "D:/ml_projects/quantifai-assignment/v2_dynamic_pipeline/servers-archived/src/sqlite/src/mcp_server_sqlite",
                        "run", "mcp-server-sqlite",
                        "--db-path", self.db_path
                    ]
                }
            })


            tools = await self.client.get_tools()
            model = ChatGroq(model="llama3-70b-8192", temperature=0)
            self.agent = create_react_agent(model, tools)
            self.connected = True
            return "‚úÖ Connected to SQLite MCP Server"

        except Exception as e:
            self.connected = False
            return f"‚ùå Connection failed: {str(e)}"

    async def query(self, user_input, history):
        if not self.connected:
            return "‚ùå Please connect first", history

        try:
            response = await self.agent.ainvoke({
                "messages": [{"role": "user", "content": user_input}]
            })

            result = response['messages'][-1].content
            history.append([user_input, result])
            return "", history

        except Exception as e:
            error_msg = f"‚ùå Query failed: {str(e)}"
            history.append([user_input, error_msg])
            return "", history

# Instantiation
sqlite_client = SQLiteMCPClient(db_path="D:/ml_projects/quantifai-assignment/v2_ecommerce.db")

# Sample SQLite queries
TEST_QUERIES = {
    "üìä Revenue & Sales KPIs": [
        "What is the total revenue generated?",
        "What is the average order value (AOV)?",
        "Show total revenue by month over the past year.",
        "Show revenue breakdown by city.",
        "Show top 10 customers by total spend.",
        "Show total discounts given across all orders.",
        "Show average shipping cost per order.",
        "How many orders were placed each day this month?"
    ],
    "üõí Orders & Transaction Insights": [
        "List the 10 most recent orders.",
        "Find all orders where shipping cost > 500.",
        "Find the most common payment method used.",
        "Show number of orders placed per customer segment.",
        "Find average tax paid per order.",
        "Which orders had the highest discount applied?",
        "How many orders were placed last week?"
    ],
    "üë• Customers & Segmentation": [
        "List all customers with loyalty points above 1000.",
        "Find customers who haven't ordered in the last 6 months.",
        "Show number of customers by state.",
        "What is the age distribution of customers?",
        "Top 5 customers by number of orders.",
        "Show preferred payment method distribution.",
        "Group customers by segment and show total spend."
    ],
    "üì¶ Products & Inventory": [
        "List top 10 best-selling products by quantity ordered.",
        "Show total revenue generated by each product.",
        "Find products with stock below the reorder level.",
        "Show products with highest profit margin.",
        "List all products that are currently active and out of stock.",
        "What are the top 5 most expensive products by price?",
        "Show average product rating by category."
    ],
    "üìà Advanced Business Insights": [
        "Calculate customer lifetime value (CLTV) using total_spent.",
        "Segment customers by recency, frequency, and monetary value (RFM).",
        "Show products frequently purchased together.",
        "Find the most common shipping cities.",
        "Show daily revenue trend for the past 30 days.",
        "Analyze order behavior of high-value customers.",
        "Compare average discount for each customer segment."
    ]
}

def create_query_buttons():
    buttons = []
    for category, queries in TEST_QUERIES.items():
        with gr.Accordion(category, open=False):
            for q in queries:
                btn = gr.Button(q, size="sm", variant="secondary")
                buttons.append((btn, q))
    return buttons

async def handle_connect():
    return await sqlite_client.connect()

async def handle_query(query, history):
    return await sqlite_client.query(query, history)

def load_query(q):
    return q

with gr.Blocks(theme=gr.themes.Soft(), title="SQLite MCP Assistant") as demo:
    gr.Markdown("""
    # Ecommerce SQLite MCP Assistant
    **Query SQLite DB with natural language.**
    
    DB: `v2_ecommerce.db`
    Model: `llama3-70b-8192` via Groq
    """)

    with gr.Row():
        with gr.Column(scale=3):
            connect_btn = gr.Button("Connect to SQLite Server", variant="primary")
            status = gr.Textbox(label="Status", value="Not connected", interactive=False)

            chatbot = gr.Chatbot(label="Query Results", height=400, show_copy_button=True)
            query_box = gr.Textbox(label="Ask your question", placeholder="e.g. 'Top 5 customers by revenue'")
            execute_btn = gr.Button("Run Query", variant="primary")

        with gr.Column(scale=2):
            gr.Markdown("### üìù Sample Queries")
            query_buttons = create_query_buttons()

    connect_btn.click(handle_connect, outputs=[status])
    execute_btn.click(handle_query, inputs=[query_box, chatbot], outputs=[query_box, chatbot])
    query_box.submit(handle_query, inputs=[query_box, chatbot], outputs=[query_box, chatbot])

    for btn, q in query_buttons:
        btn.click(load_query, inputs=[gr.State(q)], outputs=[query_box])

if __name__ == "__main__":
    print("üöÄ Launching Gradio + SQLite MCP app")
    demo.launch(server_name="0.0.0.0", server_port=7860)
